{
  "openapi": "3.0.2",
  "servers": [],
  "info": {
    "description": "Documentation for Ladybug visualization schema",
    "version": "0.7.8",
    "title": "Ladybug Visualization Schema",
    "contact": {
      "name": "Ladybug Tools",
      "email": "info@ladybug.tools",
      "url": "https://github.com/ladybug-tools/ladybug-display-core"
    },
    "x-logo": {
      "url": "https://www.ladybug.tools/assets/img/ladybug-large.png",
      "altText": "Ladybug logo"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/ladybug-tools/ladybug-display-schema/blob/master/LICENSE"
    }
  },
  "externalDocs": {
    "description": "OpenAPI Specification with Inheritance",
    "url": "./visualization_inheritance.json"
  },
  "tags": [
    {
      "name": "analysisgeometry_model",
      "x-displayName": "AnalysisGeometry",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/AnalysisGeometry\" />\n"
    },
    {
      "name": "arc2d_model",
      "x-displayName": "Arc2D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Arc2D\" />\n"
    },
    {
      "name": "arc3d_model",
      "x-displayName": "Arc3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Arc3D\" />\n"
    },
    {
      "name": "color_model",
      "x-displayName": "Color",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Color\" />\n"
    },
    {
      "name": "cone_model",
      "x-displayName": "Cone",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Cone\" />\n"
    },
    {
      "name": "contextgeometry_model",
      "x-displayName": "ContextGeometry",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/ContextGeometry\" />\n"
    },
    {
      "name": "cylinder_model",
      "x-displayName": "Cylinder",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Cylinder\" />\n"
    },
    {
      "name": "datatype_model",
      "x-displayName": "DataType",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DataType\" />\n"
    },
    {
      "name": "datatypes_model",
      "x-displayName": "DataTypes",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DataTypes\" />\n"
    },
    {
      "name": "default_model",
      "x-displayName": "Default",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Default\" />\n"
    },
    {
      "name": "displayarc2d_model",
      "x-displayName": "DisplayArc2D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayArc2D\" />\n"
    },
    {
      "name": "displayarc3d_model",
      "x-displayName": "DisplayArc3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayArc3D\" />\n"
    },
    {
      "name": "displaybasemodel_model",
      "x-displayName": "DisplayBaseModel",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayBaseModel\" />\n"
    },
    {
      "name": "displaycone_model",
      "x-displayName": "DisplayCone",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayCone\" />\n"
    },
    {
      "name": "displaycylinder_model",
      "x-displayName": "DisplayCylinder",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayCylinder\" />\n"
    },
    {
      "name": "displayface3d_model",
      "x-displayName": "DisplayFace3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayFace3D\" />\n"
    },
    {
      "name": "displaylinesegment2d_model",
      "x-displayName": "DisplayLineSegment2D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayLineSegment2D\" />\n"
    },
    {
      "name": "displaylinesegment3d_model",
      "x-displayName": "DisplayLineSegment3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayLineSegment3D\" />\n"
    },
    {
      "name": "displaymesh2d_model",
      "x-displayName": "DisplayMesh2D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayMesh2D\" />\n"
    },
    {
      "name": "displaymesh3d_model",
      "x-displayName": "DisplayMesh3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayMesh3D\" />\n"
    },
    {
      "name": "displaymodes_model",
      "x-displayName": "DisplayModes",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayModes\" />\n"
    },
    {
      "name": "displayplane_model",
      "x-displayName": "DisplayPlane",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayPlane\" />\n"
    },
    {
      "name": "displaypoint2d_model",
      "x-displayName": "DisplayPoint2D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayPoint2D\" />\n"
    },
    {
      "name": "displaypoint3d_model",
      "x-displayName": "DisplayPoint3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayPoint3D\" />\n"
    },
    {
      "name": "displaypolyface3d_model",
      "x-displayName": "DisplayPolyface3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayPolyface3D\" />\n"
    },
    {
      "name": "displaypolygon2d_model",
      "x-displayName": "DisplayPolygon2D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayPolygon2D\" />\n"
    },
    {
      "name": "displaypolyline2d_model",
      "x-displayName": "DisplayPolyline2D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayPolyline2D\" />\n"
    },
    {
      "name": "displaypolyline3d_model",
      "x-displayName": "DisplayPolyline3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayPolyline3D\" />\n"
    },
    {
      "name": "displayray2d_model",
      "x-displayName": "DisplayRay2D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayRay2D\" />\n"
    },
    {
      "name": "displayray3d_model",
      "x-displayName": "DisplayRay3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayRay3D\" />\n"
    },
    {
      "name": "displaysphere_model",
      "x-displayName": "DisplaySphere",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplaySphere\" />\n"
    },
    {
      "name": "displaytext3d_model",
      "x-displayName": "DisplayText3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayText3D\" />\n"
    },
    {
      "name": "displayvector2d_model",
      "x-displayName": "DisplayVector2D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayVector2D\" />\n"
    },
    {
      "name": "displayvector3d_model",
      "x-displayName": "DisplayVector3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DisplayVector3D\" />\n"
    },
    {
      "name": "face3d_model",
      "x-displayName": "Face3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Face3D\" />\n"
    },
    {
      "name": "genericdatatype_model",
      "x-displayName": "GenericDataType",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/GenericDataType\" />\n"
    },
    {
      "name": "horizontalalignments_model",
      "x-displayName": "HorizontalAlignments",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/HorizontalAlignments\" />\n"
    },
    {
      "name": "legend2dparameters_model",
      "x-displayName": "Legend2DParameters",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Legend2DParameters\" />\n"
    },
    {
      "name": "legend3dparameters_model",
      "x-displayName": "Legend3DParameters",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Legend3DParameters\" />\n"
    },
    {
      "name": "legendparameters_model",
      "x-displayName": "LegendParameters",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/LegendParameters\" />\n"
    },
    {
      "name": "linecurvebase_model",
      "x-displayName": "LineCurveBase",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/LineCurveBase\" />\n"
    },
    {
      "name": "linesegment2d_model",
      "x-displayName": "LineSegment2D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/LineSegment2D\" />\n"
    },
    {
      "name": "linesegment3d_model",
      "x-displayName": "LineSegment3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/LineSegment3D\" />\n"
    },
    {
      "name": "linetypes_model",
      "x-displayName": "LineTypes",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/LineTypes\" />\n"
    },
    {
      "name": "mesh2d_model",
      "x-displayName": "Mesh2D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Mesh2D\" />\n"
    },
    {
      "name": "mesh3d_model",
      "x-displayName": "Mesh3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Mesh3D\" />\n"
    },
    {
      "name": "plane_model",
      "x-displayName": "Plane",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Plane\" />\n"
    },
    {
      "name": "point2d_model",
      "x-displayName": "Point2D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Point2D\" />\n"
    },
    {
      "name": "point3d_model",
      "x-displayName": "Point3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Point3D\" />\n"
    },
    {
      "name": "polyface3d_model",
      "x-displayName": "Polyface3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Polyface3D\" />\n"
    },
    {
      "name": "polyfaceedgeinfo_model",
      "x-displayName": "PolyfaceEdgeInfo",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/PolyfaceEdgeInfo\" />\n"
    },
    {
      "name": "polygon2d_model",
      "x-displayName": "Polygon2D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Polygon2D\" />\n"
    },
    {
      "name": "polyline2d_model",
      "x-displayName": "Polyline2D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Polyline2D\" />\n"
    },
    {
      "name": "polyline3d_model",
      "x-displayName": "Polyline3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Polyline3D\" />\n"
    },
    {
      "name": "ray2d_model",
      "x-displayName": "Ray2D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Ray2D\" />\n"
    },
    {
      "name": "ray3d_model",
      "x-displayName": "Ray3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Ray3D\" />\n"
    },
    {
      "name": "singlecolorbase_model",
      "x-displayName": "SingleColorBase",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/SingleColorBase\" />\n"
    },
    {
      "name": "sphere_model",
      "x-displayName": "Sphere",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Sphere\" />\n"
    },
    {
      "name": "units_model",
      "x-displayName": "Units",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Units\" />\n"
    },
    {
      "name": "vector2d_model",
      "x-displayName": "Vector2D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Vector2D\" />\n"
    },
    {
      "name": "vector3d_model",
      "x-displayName": "Vector3D",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Vector3D\" />\n"
    },
    {
      "name": "verticalalignments_model",
      "x-displayName": "VerticalAlignments",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/VerticalAlignments\" />\n"
    },
    {
      "name": "visualizationdata_model",
      "x-displayName": "VisualizationData",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/VisualizationData\" />\n"
    },
    {
      "name": "visualizationmetadata_model",
      "x-displayName": "VisualizationMetaData",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/VisualizationMetaData\" />\n"
    },
    {
      "name": "visualizationset_model",
      "x-displayName": "VisualizationSet",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/VisualizationSet\" />\n"
    },
    {
      "name": "_openapigenbasemodel_model",
      "x-displayName": "_OpenAPIGenBaseModel",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/_OpenAPIGenBaseModel\" />\n"
    },
    {
      "name": "_visualizationbase_model",
      "x-displayName": "_VisualizationBase",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/_VisualizationBase\" />\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Models",
      "tags": [
        "_openapigenbasemodel_model",
        "_visualizationbase_model",
        "analysisgeometry_model",
        "arc2d_model",
        "arc3d_model",
        "color_model",
        "cone_model",
        "contextgeometry_model",
        "cylinder_model",
        "datatype_model",
        "datatypes_model",
        "default_model",
        "displayarc2d_model",
        "displayarc3d_model",
        "displaybasemodel_model",
        "displaycone_model",
        "displaycylinder_model",
        "displayface3d_model",
        "displaylinesegment2d_model",
        "displaylinesegment3d_model",
        "displaymesh2d_model",
        "displaymesh3d_model",
        "displaymodes_model",
        "displayplane_model",
        "displaypoint2d_model",
        "displaypoint3d_model",
        "displaypolyface3d_model",
        "displaypolygon2d_model",
        "displaypolyline2d_model",
        "displaypolyline3d_model",
        "displayray2d_model",
        "displayray3d_model",
        "displaysphere_model",
        "displaytext3d_model",
        "displayvector2d_model",
        "displayvector3d_model",
        "face3d_model",
        "genericdatatype_model",
        "horizontalalignments_model",
        "legend2dparameters_model",
        "legend3dparameters_model",
        "legendparameters_model",
        "linecurvebase_model",
        "linesegment2d_model",
        "linesegment3d_model",
        "linetypes_model",
        "mesh2d_model",
        "mesh3d_model",
        "plane_model",
        "point2d_model",
        "point3d_model",
        "polyface3d_model",
        "polyfaceedgeinfo_model",
        "polygon2d_model",
        "polyline2d_model",
        "polyline3d_model",
        "ray2d_model",
        "ray3d_model",
        "singlecolorbase_model",
        "sphere_model",
        "units_model",
        "vector2d_model",
        "vector3d_model",
        "verticalalignments_model",
        "visualizationdata_model",
        "visualizationmetadata_model",
        "visualizationset_model"
      ]
    }
  ],
  "paths": {},
  "components": {
    "schemas": {
      "Color": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "r": {
                "title": "R",
                "description": "Value for red channel.",
                "minimum": 0,
                "maximum": 255,
                "type": "integer",
                "format": "int32"
              },
              "g": {
                "title": "G",
                "description": "Value for green channel.",
                "minimum": 0,
                "maximum": 255,
                "type": "integer",
                "format": "int32"
              },
              "b": {
                "title": "B",
                "description": "Value for blue channel.",
                "minimum": 0,
                "maximum": 255,
                "type": "integer",
                "format": "int32"
              },
              "type": {
                "title": "Type",
                "default": "Color",
                "pattern": "^Color$",
                "type": "string",
                "readOnly": true
              },
              "a": {
                "title": "A",
                "description": "Value for the alpha channel, which defines the opacity as a number between 0 (fully transparent) and 255 (fully opaque).",
                "default": 255,
                "minimum": 0,
                "maximum": 255,
                "type": "integer",
                "format": "int32"
              }
            },
            "required": [
              "r",
              "g",
              "b"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Color",
        "description": "A RGB color.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Mesh3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "vertices": {
                "title": "Vertices",
                "description": "A list of points representing the vertices of the mesh. The list should include at least 3 points and each point should be a list of 3 (x, y, z) values.",
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "format": "double"
                  },
                  "minItems": 3,
                  "maxItems": 3
                }
              },
              "faces": {
                "title": "Faces",
                "description": "A list of lists with each sub-list having either 3 or 4 integers. These integers correspond to indices within the list of vertices.",
                "minItems": 1,
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 0,
                    "format": "int32"
                  },
                  "minItems": 3,
                  "maxItems": 4
                }
              },
              "type": {
                "title": "Type",
                "default": "Mesh3D",
                "pattern": "^Mesh3D$",
                "type": "string",
                "readOnly": true
              },
              "colors": {
                "title": "Colors",
                "description": "An optional list of colors that correspond to either the faces of the mesh or the vertices of the mesh.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Color"
                }
              }
            },
            "required": [
              "vertices",
              "faces"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Mesh3D",
        "description": "A mesh in 3D space.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DataTypes": {
        "title": "DataTypes",
        "description": "An enumeration.",
        "enum": [
          "ActivityLevel",
          "AerosolOpticalDepth",
          "AirSpeed",
          "AirTemperature",
          "AirTemperatureDelta",
          "Albedo",
          "Angle",
          "Area",
          "AtmosphericStationPressure",
          "CeilingHeight",
          "ClothingInsulation",
          "ConvectionCoefficient",
          "CoolingDegreeTime",
          "Current",
          "DewPointTemperature",
          "DiffuseHorizontalIlluminance",
          "DiffuseHorizontalIrradiance",
          "DiffuseHorizontalRadiation",
          "DirectHorizontalIrradiance",
          "DirectHorizontalRadiation",
          "DirectNormalIlluminance",
          "DirectNormalIrradiance",
          "DirectNormalRadiation",
          "DiscomfortReason",
          "Distance",
          "DryBulbTemperature",
          "EffectiveRadiantField",
          "Energy",
          "EnergyFlux",
          "EnergyIntensity",
          "Enthalpy",
          "ExtraterrestrialDirectNormalRadiation",
          "ExtraterrestrialHorizontalRadiation",
          "Fraction",
          "GlobalHorizontalIlluminance",
          "GlobalHorizontalIrradiance",
          "GlobalHorizontalRadiation",
          "GroundTemperature",
          "HeatingDegreeTime",
          "HorizontalInfraredRadiationIntensity",
          "HumidityRatio",
          "Illuminance",
          "Irradiance",
          "LiquidPrecipitationDepth",
          "LiquidPrecipitationQuantity",
          "Luminance",
          "Mass",
          "MassFlowRate",
          "MeanRadiantTemperature",
          "MetabolicRate",
          "OpaqueSkyCover",
          "OperativeTemperature",
          "OperativeTemperatureDelta",
          "PercentagePeopleDissatisfied",
          "Power",
          "PrecipitableWater",
          "PredictedMeanVote",
          "Pressure",
          "PrevailingOutdoorTemperature",
          "RValue",
          "RadiantCoefficient",
          "RadiantTemperature",
          "RadiantTemperatureDelta",
          "Radiation",
          "RelativeHumidity",
          "SkyTemperature",
          "SnowDepth",
          "SpecificEnergy",
          "Speed",
          "StandardEffectiveTemperature",
          "Temperature",
          "TemperatureDelta",
          "TemperatureTime",
          "ThermalComfort",
          "ThermalCondition",
          "ThermalConditionElevenPoint",
          "ThermalConditionFivePoint",
          "ThermalConditionNinePoint",
          "ThermalConditionSevenPoint",
          "Time",
          "TotalSkyCover",
          "UTCICategory",
          "UValue",
          "UniversalThermalClimateIndex",
          "Visibility",
          "Voltage",
          "Volume",
          "VolumeFlowRate",
          "VolumeFlowRateIntensity",
          "WetBulbTemperature",
          "WindDirection",
          "WindSpeed",
          "ZenithLuminance"
        ],
        "type": "string"
      },
      "DataType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "data_type": {
                "description": "Text to indicate the type of data. This governs the behavior of the data type and the acceptable units. The DataTypes enumeration contains all acceptable types.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DataTypes"
                  }
                ]
              },
              "name": {
                "title": "Name",
                "description": "Text to indicate how the data type displays. This can be more specific than the data_type.",
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "DataType",
                "pattern": "^DataType$",
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "data_type",
              "name"
            ],
            "additionalProperties": false
          }
        ],
        "title": "DataType",
        "description": "Data type representation.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Vector2D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "x": {
                "title": "X",
                "description": "Number for X coordinate.",
                "type": "number",
                "format": "double"
              },
              "y": {
                "title": "Y",
                "description": "Number for Y coordinate.",
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "Vector2D",
                "pattern": "^Vector2D$",
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "x",
              "y"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Vector2D",
        "description": "A vector object in 2D space.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Point2D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "x": {
                "title": "X",
                "description": "Number for X coordinate.",
                "type": "number",
                "format": "double"
              },
              "y": {
                "title": "Y",
                "description": "Number for Y coordinate.",
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "Point2D",
                "pattern": "^Point2D$",
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "x",
              "y"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Point2D",
        "description": "A point object in 2D space.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Ray2D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "p": {
                "title": "P",
                "description": "Ray base point as 2 (x, y) values.",
                "minItems": 2,
                "maxItems": 2,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "v": {
                "title": "V",
                "description": "Ray direction vector as 2 (x, y) values.",
                "minItems": 2,
                "maxItems": 2,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "type": {
                "title": "Type",
                "default": "Ray2D",
                "pattern": "^Ray2D$",
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "p",
              "v"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Ray2D",
        "description": "A ray object in 2D space.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "LineSegment2D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "p": {
                "title": "P",
                "description": "Line segment base point as 2 (x, y) values.",
                "minItems": 2,
                "maxItems": 2,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "v": {
                "title": "V",
                "description": "Line segment direction vector as 2 (x, y) values.",
                "minItems": 2,
                "maxItems": 2,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "type": {
                "title": "Type",
                "default": "LineSegment2D",
                "pattern": "^LineSegment2D$",
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "p",
              "v"
            ],
            "additionalProperties": false
          }
        ],
        "title": "LineSegment2D",
        "description": "A single line segment face in 2D space.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Polyline2D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "vertices": {
                "title": "Vertices",
                "description": "A list of points representing the the vertices of the polyline. The list should include at least 3 points and each point should be a list of 2 (x, y) values.",
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "format": "double"
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              },
              "type": {
                "title": "Type",
                "default": "Polyline2D",
                "pattern": "^Polyline2D$",
                "type": "string",
                "readOnly": true
              },
              "interpolated": {
                "title": "Interpolated",
                "description": "A boolean to note whether the polyline should be interpolated between the input vertices when it is translated to other interfaces.",
                "default": false,
                "type": "boolean"
              }
            },
            "required": [
              "vertices"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Polyline2D",
        "description": "A polyline in 2D space.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Arc2D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "c": {
                "title": "C",
                "description": "Center of the arc as 2 (x, y) values.",
                "minItems": 2,
                "maxItems": 2,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "r": {
                "title": "R",
                "description": "A number representing the radius of the arc.",
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "Arc2D",
                "pattern": "^Arc2D$",
                "type": "string",
                "readOnly": true
              },
              "a1": {
                "title": "A1",
                "description": "A number between 0 and 2 * pi for the start angle of the arc.",
                "default": 0,
                "minimum": 0,
                "maximum": 6.283185307179586,
                "type": "number",
                "format": "double"
              },
              "a2": {
                "title": "A2",
                "description": "A number between 0 and 2 * pi for the end angle of the arc.",
                "default": 6.283185307179586,
                "minimum": 0,
                "maximum": 6.283185307179586,
                "type": "number",
                "format": "double"
              }
            },
            "required": [
              "c",
              "r"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Arc2D",
        "description": "A single arc or circle in 2D space.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Polygon2D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "vertices": {
                "title": "Vertices",
                "description": "A list of points representing the vertices of the polygon. The list should include at least 3 points and each point should be a list of 2 (x, y) values.",
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "format": "double"
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              },
              "type": {
                "title": "Type",
                "default": "Polygon2D",
                "pattern": "^Polygon2D$",
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "vertices"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Polygon2D",
        "description": "A polygon in 2D space (without holes).",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Mesh2D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "vertices": {
                "title": "Vertices",
                "description": "A list of points representing the vertices of the mesh. The list should include at least 3 points and each point should be a list of 2 (x, y) values.",
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "format": "double"
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              },
              "faces": {
                "title": "Faces",
                "description": "A list of lists with each sub-list having either 3 or 4 integers. These integers correspond to indices within the list of vertices.",
                "minItems": 1,
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 0,
                    "format": "int32"
                  },
                  "minItems": 3,
                  "maxItems": 4
                }
              },
              "type": {
                "title": "Type",
                "default": "Mesh2D",
                "pattern": "^Mesh2D$",
                "type": "string",
                "readOnly": true
              },
              "colors": {
                "title": "Colors",
                "description": "An optional list of colors that correspond to either the faces of the mesh or the vertices of the mesh.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Color"
                }
              }
            },
            "required": [
              "vertices",
              "faces"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Mesh2D",
        "description": "A mesh in 2D space.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Vector3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "x": {
                "title": "X",
                "description": "Number for X coordinate.",
                "type": "number",
                "format": "double"
              },
              "y": {
                "title": "Y",
                "description": "Number for Y coordinate.",
                "type": "number",
                "format": "double"
              },
              "z": {
                "title": "Z",
                "description": "Number for Z coordinate.",
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "Vector3D",
                "pattern": "^Vector3D$",
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Vector3D",
        "description": "A vector object in 3D space.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Point3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "x": {
                "title": "X",
                "description": "Number for X coordinate.",
                "type": "number",
                "format": "double"
              },
              "y": {
                "title": "Y",
                "description": "Number for Y coordinate.",
                "type": "number",
                "format": "double"
              },
              "z": {
                "title": "Z",
                "description": "Number for Z coordinate.",
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "Point3D",
                "pattern": "^Point3D$",
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "x",
              "y",
              "z"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Point3D",
        "description": "A point object in 3D space.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Ray3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "p": {
                "title": "P",
                "description": "Ray base point as 3 (x, y, z) values.",
                "minItems": 3,
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "v": {
                "title": "V",
                "description": "Ray direction vector as 3 (x, y, z) values.",
                "minItems": 3,
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "type": {
                "title": "Type",
                "default": "Ray3D",
                "pattern": "^Ray3D$",
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "p",
              "v"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Ray3D",
        "description": "A ray object in 3D space.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Plane": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "n": {
                "title": "N",
                "description": "Plane normal as 3 (x, y, z) values.",
                "minItems": 3,
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "o": {
                "title": "O",
                "description": "Plane origin as 3 (x, y, z) values",
                "minItems": 3,
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "type": {
                "title": "Type",
                "default": "Plane",
                "pattern": "^Plane$",
                "type": "string",
                "readOnly": true
              },
              "x": {
                "title": "X",
                "description": "Plane x-axis as 3 (x, y, z) values. If None, it is autocalculated.",
                "minItems": 3,
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "required": [
              "n",
              "o"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Plane",
        "description": "A plane object.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "LineSegment3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "p": {
                "title": "P",
                "description": "Line segment base point as 3 (x, y, z) values.",
                "minItems": 3,
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "v": {
                "title": "V",
                "description": "Line segment direction vector as 3 (x, y, z) values.",
                "minItems": 3,
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "type": {
                "title": "Type",
                "default": "LineSegment3D",
                "pattern": "^LineSegment3D$",
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "p",
              "v"
            ],
            "additionalProperties": false
          }
        ],
        "title": "LineSegment3D",
        "description": "A single line segment face in 3D space.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Polyline3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "vertices": {
                "title": "Vertices",
                "description": "A list of points representing the the vertices of the polyline. The list should include at least 3 points and each point should be a list of 3 (x, y, z) values.",
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "format": "double"
                  },
                  "minItems": 3,
                  "maxItems": 3
                }
              },
              "type": {
                "title": "Type",
                "default": "Polyline3D",
                "pattern": "^Polyline3D$",
                "type": "string",
                "readOnly": true
              },
              "interpolated": {
                "title": "Interpolated",
                "description": "A boolean to note whether the polyline should be interpolated between the input vertices when it is translated to other interfaces.",
                "default": false,
                "type": "boolean"
              }
            },
            "required": [
              "vertices"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Polyline3D",
        "description": "A polyline in 3D space.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Arc3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "plane": {
                "title": "Plane",
                "description": "A Plane in which the arc lies with an origin representing the center of the circle for the arc.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Plane"
                  }
                ]
              },
              "radius": {
                "title": "Radius",
                "description": "A number representing the radius of the arc.",
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "Arc3D",
                "pattern": "^Arc3D$",
                "type": "string",
                "readOnly": true
              },
              "a1": {
                "title": "A1",
                "description": "A number between 0 and 2 * pi for the start angle of the arc.",
                "default": 0,
                "minimum": 0,
                "maximum": 6.283185307179586,
                "type": "number",
                "format": "double"
              },
              "a2": {
                "title": "A2",
                "description": "A number between 0 and 2 * pi for the end angle of the arc.",
                "default": 6.283185307179586,
                "minimum": 0,
                "maximum": 6.283185307179586,
                "type": "number",
                "format": "double"
              }
            },
            "required": [
              "plane",
              "radius"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Arc3D",
        "description": "A single arc or circle in 3D space.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Face3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "boundary": {
                "title": "Boundary",
                "description": "A list of points representing the outer boundary vertices of the face. The list should include at least 3 points and each point should be a list of 3 (x, y, z) values.",
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "format": "double"
                  },
                  "minItems": 3,
                  "maxItems": 3
                }
              },
              "type": {
                "title": "Type",
                "default": "Face3D",
                "pattern": "^Face3D$",
                "type": "string",
                "readOnly": true
              },
              "holes": {
                "title": "Holes",
                "description": "Optional list of lists with one list for each hole in the face.Each hole should be a list of at least 3 points and each point a list of 3 (x, y, z) values. If None, it will be assumed that there are no holes in the face.",
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "double"
                    },
                    "minItems": 3,
                    "maxItems": 3
                  },
                  "minItems": 3
                }
              },
              "plane": {
                "title": "Plane",
                "description": "Optional Plane indicating the plane in which the face exists.If None, the plane will usually be derived from the boundary points.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Plane"
                  }
                ]
              }
            },
            "required": [
              "boundary"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Face3D",
        "description": "A single planar face in 3D space.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "PolyfaceEdgeInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "edge_indices": {
                "title": "Edge Indices",
                "description": "An array objects that each contain two integers. These integers correspond to indices within the vertices list and each tuple represents a line segment for an edge of the polyface.",
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 0,
                    "format": "int32"
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              },
              "edge_types": {
                "title": "Edge Types",
                "description": "An array of integers for each edge that parallels the edge_indices list. An integer of 0 denotes a naked edge, an integer of 1 denotes an internal edge. Anything higher is a non-manifold edge.",
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "integer",
                  "minimum": 0,
                  "format": "int32"
                }
              },
              "type": {
                "title": "Type",
                "default": "PolyfaceEdgeInfo",
                "type": "string",
                "pattern": "^PolyfaceEdgeInfo$",
                "readOnly": true
              }
            },
            "required": [
              "edge_indices",
              "edge_types"
            ],
            "additionalProperties": false
          }
        ],
        "title": "PolyfaceEdgeInfo",
        "description": "Optional edge information for Polyface.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Polyface3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "vertices": {
                "title": "Vertices",
                "description": "A list of points representing the vertices of the polyface. The list should include at least 3 points and each point should be a list of 3 (x, y, z) values.",
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "format": "double"
                  },
                  "minItems": 3,
                  "maxItems": 3
                }
              },
              "face_indices": {
                "title": "Face Indices",
                "description": "A list of lists with one list for each face of the polyface. Each face list must contain at least one sub-list of integers corresponding to indices within the vertices list. Additional sub-lists of integers may follow this one such that the first sub-list denotes the boundary of the face while each subsequent sub-list denotes a hole in the face.",
                "minItems": 1,
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "minimum": 0,
                      "format": "int32"
                    },
                    "minItems": 3
                  },
                  "minItems": 1
                }
              },
              "type": {
                "title": "Type",
                "default": "Polyface3D",
                "pattern": "^Polyface3D$",
                "type": "string",
                "readOnly": true
              },
              "edge_information": {
                "title": "Edge Information",
                "description": "Optional edge information, which will speed up the creation of the Polyface object if it is available but should be left as None if it is unknown. If None, edge_information will be computed from the vertices and face_indices inputs.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PolyfaceEdgeInfo"
                  }
                ]
              }
            },
            "required": [
              "vertices",
              "face_indices"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Polyface3D",
        "description": "A Polyface in 3D space.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Sphere": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "center": {
                "title": "Center",
                "description": "The center of the sphere as 3 (x, y, z) values.",
                "minItems": 3,
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "radius": {
                "title": "Radius",
                "description": "A number representing the radius of the sphere.",
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "Sphere",
                "pattern": "^Sphere$",
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "center",
              "radius"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Sphere",
        "description": "A sphere object.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Cone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "vertex": {
                "title": "Vertex",
                "description": "The point at the tip of the cone as 3 (x, y, z) values.",
                "minItems": 3,
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "axis": {
                "title": "Axis",
                "description": "The vector representing the direction of the cone as 3 (x, y, z) values. The vector extends from the vertex to the center of the base.",
                "minItems": 3,
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "angle": {
                "title": "Angle",
                "description": "An angle in radians representing the half angle between the axis and the surface.",
                "exclusiveMinimum": 0,
                "exclusiveMaximum": 1.5707963267948966,
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "Cone",
                "pattern": "^Cone$",
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "vertex",
              "axis",
              "angle"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Cone",
        "description": "A cone object.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Cylinder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "center": {
                "title": "Center",
                "description": "The center of the bottom base of the cylinder as 3 (x, y, z) values.",
                "minItems": 3,
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "axis": {
                "title": "Axis",
                "description": "The vector representing the direction of the cylinder as 3 (x, y, z) values. The vector extends from the bottom base center to the top base center.",
                "minItems": 3,
                "maxItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "radius": {
                "title": "Radius",
                "description": "A number representing the radius of the cylinder.",
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "Cylinder",
                "pattern": "^Cylinder$",
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "center",
              "axis",
              "radius"
            ],
            "additionalProperties": false
          }
        ],
        "title": "Cylinder",
        "description": "A cylinder object.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Default": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "Default",
                "pattern": "^Default$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "Default",
        "description": "Object to signify when the default value of a visual interface should be used.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Legend3DParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "Legend3DParameters",
                "pattern": "^Legend3DParameters$",
                "type": "string",
                "readOnly": true
              },
              "base_plane": {
                "title": "Base Plane",
                "description": "A Ladybug Plane object to note the starting position from where the legend will be generated. The default is the world XY plane at origin (0, 0, 0) unless the legend is assigned to a specific geometry, in which case the origin is in the lower right corner of the geometry bounding box for vertical legends and the upper right corner for horizontal legends.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Plane"
                  }
                ]
              },
              "segment_height": {
                "title": "Segment Height",
                "description": "A number to set the height for each of the legend segments. The default is 1 unless the legend is assigned to a specific geometry, in which case it is automatically set to a value on an appropriate scale (some fraction of the bounding box around the geometry).",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "segment_width": {
                "title": "Segment Width",
                "description": "A number to set the width for each of the legend segments. The default is 1 unless the legend is assigned to a specific geometry, in which case it is automatically set to a value on an appropriate scale (some fraction of the bounding box around the geometry).",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "text_height": {
                "title": "Text Height",
                "description": "A number to set the height for the legend text. Default is 1/3 of the segment_height.",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "number"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "Legend3DParameters",
        "description": "Base class for all objects that are not extensible with additional keys.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Legend2DParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "Legend2DParameters",
                "pattern": "^Legend2DParameters$",
                "type": "string",
                "readOnly": true
              },
              "origin_x": {
                "title": "Origin X",
                "description": "A text string to note the X coordinate of the base point from where the legend will be generated (assuming an origin in the upper-left corner of the viewport with higher positive values of X moving to the right). Text must be formatted as an integer followed by either \"px\" (to denote the number of viewport pixels) or \"%\" (to denote the percentage of the viewport width). Examples include 10px, 5%. The default is set to make the legend clearly visible on the viewport (usually 10px).",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\d*px|\\d*%$"
                  }
                ]
              },
              "origin_y": {
                "title": "Origin Y",
                "description": "A text string to note the Y coordinate of the base point from where the legend will be generated (assuming an origin in the upper-left corner of the viewport with higher positive values of Y moving downward). Text must be formatted as an integer followed by either \"px\" (to denote the number of viewport pixels) or \"%\" (to denote the percentage of the viewport height). Examples include 10px, 5%. The default is set to make the legend clearly visible on the viewport (usually 50px).",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\d*px|\\d*%$"
                  }
                ]
              },
              "segment_height": {
                "title": "Segment Height",
                "description": "A text string to note the height for each of the legend segments. Text must be formatted as an integer followed by either \"px\" (to denote the number of viewport pixels) or \"%\" (to denote the percentage of the viewport height). Examples include 10px, 5%. The default is set to make most legends readable (25px for horizontal legends and 36px for vertical legends).",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\d*px|\\d*%$"
                  }
                ]
              },
              "segment_width": {
                "title": "Segment Width",
                "description": "A text string to set the width for each of the legend segments. Text must be formatted as an integer followed by either \"px\" (to denote the number of viewport pixels) or \"%\" (to denote the percentage of the viewport width). Examples include 10px, 5%. The default is set to make most legends readable (36px for horizontal legends and 25px for vertical legends).",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\d*px|\\d*%$"
                  }
                ]
              },
              "text_height": {
                "title": "Text Height",
                "description": "A text string to set the height for the legend text. Text must be formatted as an integer followed by either \"px\" (to denote the number of viewport pixels) or \"%\" (to denote the percentage of the viewport height). Examples include 10px, 5%. Default is 1/3 of the segment_height. Default is 12px.",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "string",
                    "pattern": "^\\d*px|\\d*%$"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "Legend2DParameters",
        "description": "Base class for all objects that are not extensible with additional keys.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "LegendParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "LegendParameters",
                "pattern": "^LegendParameters$",
                "type": "string",
                "readOnly": true
              },
              "min": {
                "title": "Min",
                "description": "A number to set the lower boundary of the legend. If Default, the minimum of the values associated with the legend will be used.",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "max": {
                "title": "Max",
                "description": "A number to set the upper boundary of the legend. If Default, the maximum of the values associated with the legend will be used.",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "segment_count": {
                "title": "Segment Count",
                "description": "An integer representing the number of steps between the high and low boundary of the legend. The default is set to 11 or it will be equal to the number of items in the ordinal_dictionary. Any custom values input in here should always be greater than or equal to 1.",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "integer",
                    "minimum": 1
                  }
                ]
              },
              "colors": {
                "title": "Colors",
                "description": "An list of color objects. Default is the Ladybug original colorset.",
                "minItems": 2,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Color"
                }
              },
              "title": {
                "title": "Title",
                "description": "Text string for Legend title. Typically, the units of the data are used here but the type of data might also be used.",
                "default": "",
                "type": "string"
              },
              "continuous_legend": {
                "title": "Continuous Legend",
                "description": "Boolean noting whether legend is drawn as a gradient or discrete segments.",
                "default": false,
                "type": "boolean"
              },
              "ordinal_dictionary": {
                "title": "Ordinal Dictionary",
                "description": "Optional dictionary that maps values to text categories. If None, numerical values will be used for the legend segments. If not, text categories will be used and the legend will be ordinal. Note that, if the number of items in the dictionary are less than the segment_count, some segments will not receive any label. Examples for possible dictionaries include: {-1: \"Cold\", 0: \"Neutral\", 1: \"Hot\"}, {0: \"False\", 1: \"True\"}",
                "type": "object"
              },
              "decimal_count": {
                "title": "Decimal Count",
                "description": "An an integer for the number of decimal places in the legend text. Note that this input has no bearing on the resulting legend text when an ordinal_dictionary is present.",
                "default": 2,
                "minimum": 0,
                "type": "integer",
                "format": "int32"
              },
              "include_larger_smaller": {
                "title": "Include Larger Smaller",
                "description": "Boolean noting whether > and < should be included in legend segment text.",
                "default": false,
                "type": "boolean"
              },
              "vertical": {
                "title": "Vertical",
                "description": "Boolean noting whether legend is vertical (True) or horizontal (False).",
                "default": true,
                "type": "boolean"
              },
              "font": {
                "title": "Font",
                "description": "Text string to set the font for the legend text. Examples include \"Arial\", \"Times New Roman\", \"Courier\". Note that this parameter may not have an effect on certain interfaces that have limited access to fonts.",
                "default": "Arial",
                "type": "string"
              },
              "properties_3d": {
                "title": "Properties 3D",
                "description": "A Legend3DParameters object to specify the dimensional properties of the legend when it is rendered in the 3D environment of the geometry scene.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Legend3DParameters"
                  }
                ]
              },
              "properties_2d": {
                "title": "Properties 2D",
                "description": "A Legend2DParameters object to specify the dimensional properties of the legend when it is rendered in the 2D plane of a screen.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Legend2DParameters"
                  }
                ]
              },
              "user_data": {
                "title": "User Data",
                "description": "Optional dictionary of user data associated with the object.All keys and values of this dictionary should be of a standard data type to ensure correct serialization of the object (eg. str, float, int, list).",
                "type": "object"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "LegendParameters",
        "description": "Legend parameters used to customize legends.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "GenericDataType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "required": [
              "name",
              "base_unit"
            ],
            "properties": {
              "name": {
                "title": "Name",
                "description": "Text to indicate how the data type displays. This can be more specific than the data_type.",
                "type": "string"
              },
              "base_unit": {
                "title": "Base Unit",
                "description": "Text string for the base unit of the data type, which should be standard SI units where possible.",
                "type": "string"
              },
              "data_type": {
                "title": "Data Type",
                "default": "GenericType",
                "pattern": "^GenericType$",
                "type": "string"
              },
              "min": {
                "title": "Min",
                "description": "Optional lower limit for the data type, values below which should be physically or mathematically impossible. (Default: -inf)",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "max": {
                "title": "Max",
                "description": "Optional upper limit for the data type, values above which should be physically or mathematically impossible. (Default: +inf)",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "abbreviation": {
                "title": "Abbreviation",
                "description": "An optional abbreviation for the data type as text.",
                "default": "",
                "type": "string"
              },
              "unit_descr": {
                "title": "Unit Descr",
                "description": "An optional dictionary describing categories that the numerical values of the units relate to. For example: {-1: \"Cold\", 0: \"Neutral\", +1: \"Hot\"}; {0: \"False\", 1: \"True\"}.",
                "type": "object"
              },
              "point_in_time": {
                "title": "Point In Time",
                "description": "Boolean to note whether the data type represents conditions at a single instant in time (True) as opposed to being an average or accumulation over time (False) when it is found in hourly lists of data.",
                "default": true,
                "type": "boolean"
              },
              "cumulative": {
                "title": "Cumulative",
                "description": "Boolean to tell whether the data type can be cumulative when it is represented over time (True) or it can only be averaged over time to be meaningful (False). Note that cumulative cannot be True when point_in_time is also True.",
                "default": false,
                "type": "boolean"
              },
              "type": {
                "title": "Type",
                "default": "GenericDataType",
                "pattern": "^GenericDataType$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "GenericDataType",
        "description": "Generic data type representation.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "VisualizationData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "title": "Values",
                "description": "A list of numerical values that will be used to generate the visualization colors.",
                "minItems": 1,
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "type": {
                "title": "Type",
                "default": "VisualizationData",
                "pattern": "^VisualizationData$",
                "type": "string",
                "readOnly": true
              },
              "legend_parameters": {
                "title": "Legend Parameters",
                "description": "An Optional LegendParameters object to override default parameters of the legend. None indicates that default legend parameters will be used.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LegendParameters"
                  }
                ]
              },
              "data_type": {
                "title": "Data Type",
                "description": "Optional DataType from the ladybug datatype subpackage (ie. Temperature()) , which will be used to assign default legend properties. If None, the legend associated with this object will contain no units unless a unit below is specified.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/DataType"
                  },
                  {
                    "$ref": "#/components/schemas/GenericDataType"
                  }
                ]
              },
              "unit": {
                "title": "Unit",
                "description": "Optional text string for the units of the values. (ie. \"C\"). If None, the default units of the data_type will be used.",
                "default": "",
                "type": "string"
              },
              "user_data": {
                "title": "User Data",
                "description": "Optional dictionary of user data associated with the object.All keys and values of this dictionary should be of a standard data type to ensure correct serialization of the object (eg. str, float, int, list).",
                "type": "object"
              }
            },
            "required": [
              "values"
            ],
            "additionalProperties": false
          }
        ],
        "title": "VisualizationData",
        "description": "Represents a data set for visualization with legend parameters and data type.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayModes": {
        "title": "DisplayModes",
        "description": "An enumeration.",
        "enum": [
          "Surface",
          "SurfaceWithEdges",
          "Wireframe",
          "Points"
        ],
        "type": "string"
      },
      "AnalysisGeometry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_VisualizationBase"
          },
          {
            "type": "object",
            "required": [
              "geometry",
              "data_sets"
            ],
            "properties": {
              "geometry": {
                "title": "Geometry",
                "description": "A list of ladybug-geometry objects that is aligned with the values in the input data_sets. The length of this list should usually be equal to the total number of values in each data_set, indicating that each geometry gets a single color. Alternatively, if all of the geometry objects are meshes, the number of values in the data can be equal to the total number of faces across the meshes or the total number of vertices across the meshes.",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Vector2D"
                    },
                    {
                      "$ref": "#/components/schemas/Point2D"
                    },
                    {
                      "$ref": "#/components/schemas/Ray2D"
                    },
                    {
                      "$ref": "#/components/schemas/LineSegment2D"
                    },
                    {
                      "$ref": "#/components/schemas/Polyline2D"
                    },
                    {
                      "$ref": "#/components/schemas/Arc2D"
                    },
                    {
                      "$ref": "#/components/schemas/Polygon2D"
                    },
                    {
                      "$ref": "#/components/schemas/Mesh2D"
                    },
                    {
                      "$ref": "#/components/schemas/Vector3D"
                    },
                    {
                      "$ref": "#/components/schemas/Point3D"
                    },
                    {
                      "$ref": "#/components/schemas/Ray3D"
                    },
                    {
                      "$ref": "#/components/schemas/Plane"
                    },
                    {
                      "$ref": "#/components/schemas/LineSegment3D"
                    },
                    {
                      "$ref": "#/components/schemas/Polyline3D"
                    },
                    {
                      "$ref": "#/components/schemas/Arc3D"
                    },
                    {
                      "$ref": "#/components/schemas/Face3D"
                    },
                    {
                      "$ref": "#/components/schemas/Mesh3D"
                    },
                    {
                      "$ref": "#/components/schemas/Polyface3D"
                    },
                    {
                      "$ref": "#/components/schemas/Sphere"
                    },
                    {
                      "$ref": "#/components/schemas/Cone"
                    },
                    {
                      "$ref": "#/components/schemas/Cylinder"
                    }
                  ]
                }
              },
              "data_sets": {
                "title": "Data Sets",
                "description": "An list of VisualizationData objects representing the data sets that are associated with the input geometry.",
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VisualizationData"
                }
              },
              "type": {
                "title": "Type",
                "default": "AnalysisGeometry",
                "pattern": "^AnalysisGeometry$",
                "type": "string",
                "readOnly": true
              },
              "active_data": {
                "title": "Active Data",
                "description": "An integer to denote which of the input data_sets should be displayed by default.",
                "default": 0,
                "type": "integer",
                "format": "int32"
              },
              "display_mode": {
                "description": "Text to indicate the display mode (surface, wireframe, etc.). The DisplayModes enumeration contains all acceptable types.",
                "default": "Surface",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DisplayModes"
                  }
                ]
              },
              "hidden": {
                "title": "Hidden",
                "description": "A boolean to note whether the geometry is hidden by default and must be un-hidden to be visible in the 3D scene.",
                "default": false,
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "AnalysisGeometry",
        "description": "An object where multiple data streams correspond to the same geometry.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayRay2D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Ray2D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Ray2D"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayRay2D",
                "pattern": "^DisplayRay2D$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayRay2D",
        "description": "A ray object in 2D space with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "LineTypes": {
        "title": "LineTypes",
        "description": "An enumeration.",
        "enum": [
          "Continuous",
          "Dashed",
          "Dotted",
          "DashDot"
        ],
        "type": "string"
      },
      "DisplayArc3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Arc3D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Arc3D"
                  }
                ]
              },
              "line_width": {
                "title": "Line Width",
                "description": "Number for line width in pixels (for the screen) or millimeters (in print). Set to zero to hide the geometry.",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "number",
                    "minimum": 0
                  }
                ]
              },
              "line_type": {
                "description": "Text to indicate the type of line to display (dashed, dotted, etc.). The LineTypes enumeration contains all acceptable types.",
                "default": "Continuous",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LineTypes"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayArc3D",
                "pattern": "^DisplayArc3D$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayArc3D",
        "description": "A single arc or circle in 3D space with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayLineSegment2D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "LineSegment2D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LineSegment2D"
                  }
                ]
              },
              "line_width": {
                "title": "Line Width",
                "description": "Number for line width in pixels (for the screen) or millimeters (in print). Set to zero to hide the geometry.",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "number",
                    "minimum": 0
                  }
                ]
              },
              "line_type": {
                "description": "Text to indicate the type of line to display (dashed, dotted, etc.). The LineTypes enumeration contains all acceptable types.",
                "default": "Continuous",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LineTypes"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayLineSegment2D",
                "pattern": "^DisplayLineSegment2D$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayLineSegment2D",
        "description": "A single line segment face in 2D space with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "VisualizationMetaData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "VisualizationMetaData",
                "pattern": "^VisualizationMetaData$",
                "type": "string",
                "readOnly": true
              },
              "legend_parameters": {
                "title": "Legend Parameters",
                "description": "An Optional LegendParameters object to override default parameters of the legend. None indicates that default legend parameters will be used.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LegendParameters"
                  }
                ]
              },
              "data_type": {
                "title": "Data Type",
                "description": "Optional DataType from the ladybug datatype subpackage (ie. Temperature()) , which will be used to assign default legend properties. If None, the legend associated with this object will contain no units unless a unit below is specified.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/DataType"
                  },
                  {
                    "$ref": "#/components/schemas/GenericDataType"
                  }
                ]
              },
              "unit": {
                "title": "Unit",
                "description": "Optional text string for the units of the values. (ie. \"C\"). If None, the default units of the data_type will be used.",
                "default": "",
                "type": "string"
              },
              "user_data": {
                "title": "User Data",
                "description": "Optional dictionary of user data associated with the object.All keys and values of this dictionary should be of a standard data type to ensure correct serialization of the object (eg. str, float, int, list).",
                "type": "object"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "VisualizationMetaData",
        "description": "Represents the visualization metadata that can be assigned to VisualizationData.\n    ",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayMesh2D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Mesh2D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Mesh2D"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayMesh2D",
                "pattern": "^DisplayMesh2D$",
                "type": "string",
                "readOnly": true
              },
              "display_mode": {
                "description": "Text to indicate the display mode (surface, wireframe, etc.). The DisplayModes enumeration contains all acceptable types.",
                "default": "Surface",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DisplayModes"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayMesh2D",
        "description": "A mesh in 2D space with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayVector3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Vector3D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Vector3D"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayVector3D",
                "pattern": "^DisplayVector3D$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayVector3D",
        "description": "A point object in 3D space with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayMesh3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Mesh3D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Mesh3D"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayMesh3D",
                "pattern": "^DisplayMesh3D$",
                "type": "string",
                "readOnly": true
              },
              "display_mode": {
                "description": "Text to indicate the display mode (surface, wireframe, etc.). The DisplayModes enumeration contains all acceptable types.",
                "default": "Surface",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DisplayModes"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayMesh3D",
        "description": "A mesh in 3D space with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayArc2D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Arc2D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Arc2D"
                  }
                ]
              },
              "line_width": {
                "title": "Line Width",
                "description": "Number for line width in pixels (for the screen) or millimeters (in print). Set to zero to hide the geometry.",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "number",
                    "minimum": 0
                  }
                ]
              },
              "line_type": {
                "description": "Text to indicate the type of line to display (dashed, dotted, etc.). The LineTypes enumeration contains all acceptable types.",
                "default": "Continuous",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LineTypes"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayArc2D",
                "pattern": "^DisplayArc2D$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayArc2D",
        "description": "A single arc or circle in 2D space with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayVector2D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Vector2D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Vector2D"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayVector2D",
                "pattern": "^DisplayVector2D$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayVector2D",
        "description": "A point object in 2D space with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayPoint2D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Point2D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Point2D"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayPoint2D",
                "pattern": "^DisplayPoint2D$",
                "type": "string",
                "readOnly": true
              },
              "radius": {
                "title": "Radius",
                "description": "Number for the radius with which the point should be displayed in pixels (for the screen) or millimeters (in print).",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "number",
                    "minimum": 0
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayPoint2D",
        "description": "A point object in 2D space with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayPolyline2D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Polyline2D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Polyline2D"
                  }
                ]
              },
              "line_width": {
                "title": "Line Width",
                "description": "Number for line width in pixels (for the screen) or millimeters (in print). Set to zero to hide the geometry.",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "number",
                    "minimum": 0
                  }
                ]
              },
              "line_type": {
                "description": "Text to indicate the type of line to display (dashed, dotted, etc.). The LineTypes enumeration contains all acceptable types.",
                "default": "Continuous",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LineTypes"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayPolyline2D",
                "pattern": "^DisplayPolyline2D$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayPolyline2D",
        "description": "A polyline in 2D space with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayPolygon2D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Polygon2D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Polygon2D"
                  }
                ]
              },
              "line_width": {
                "title": "Line Width",
                "description": "Number for line width in pixels (for the screen) or millimeters (in print). Set to zero to hide the geometry.",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "number",
                    "minimum": 0
                  }
                ]
              },
              "line_type": {
                "description": "Text to indicate the type of line to display (dashed, dotted, etc.). The LineTypes enumeration contains all acceptable types.",
                "default": "Continuous",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LineTypes"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayPolygon2D",
                "pattern": "^DisplayPolygon2D$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayPolygon2D",
        "description": "A single polygon in 2D space with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayPoint3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Point3D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Point3D"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayPoint3D",
                "pattern": "^DisplayPoint3D$",
                "type": "string",
                "readOnly": true
              },
              "radius": {
                "title": "Radius",
                "description": "Number for the radius with which the point should be displayed in pixels (for the screen) or millimeters (in print).",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "number",
                    "minimum": 0
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayPoint3D",
        "description": "A point object in 3D space with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayRay3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Ray3D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Ray3D"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayRay3D",
                "pattern": "^DisplayRay3D$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayRay3D",
        "description": "A ray object in 3D space with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayPlane": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Plane for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Plane"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayPlane",
                "pattern": "^DisplayPlane$",
                "type": "string",
                "readOnly": true
              },
              "show_axes": {
                "title": "Show Axes",
                "description": "A boolean to note whether the plane should be displayed with XY axes instead of just an origin point and a normal vector.",
                "default": false,
                "type": "boolean"
              },
              "show_grid": {
                "title": "Show Grid",
                "description": "A boolean to note whether the plane should be displayed with a grid.",
                "default": false,
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayPlane",
        "description": "A plane object with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayLineSegment3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "LineSegment3D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LineSegment3D"
                  }
                ]
              },
              "line_width": {
                "title": "Line Width",
                "description": "Number for line width in pixels (for the screen) or millimeters (in print). Set to zero to hide the geometry.",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "number",
                    "minimum": 0
                  }
                ]
              },
              "line_type": {
                "description": "Text to indicate the type of line to display (dashed, dotted, etc.). The LineTypes enumeration contains all acceptable types.",
                "default": "Continuous",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LineTypes"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayLineSegment3D",
                "pattern": "^DisplayLineSegment3D$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayLineSegment3D",
        "description": "A single line segment face in 3D space with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayPolyline3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Polyline3D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Polyline3D"
                  }
                ]
              },
              "line_width": {
                "title": "Line Width",
                "description": "Number for line width in pixels (for the screen) or millimeters (in print). Set to zero to hide the geometry.",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "number",
                    "minimum": 0
                  }
                ]
              },
              "line_type": {
                "description": "Text to indicate the type of line to display (dashed, dotted, etc.). The LineTypes enumeration contains all acceptable types.",
                "default": "Continuous",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LineTypes"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayPolyline3D",
                "pattern": "^DisplayPolyline3D$",
                "type": "string",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayPolyline3D",
        "description": "A polyline in 3D space with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayFace3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Face3D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Face3D"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayFace3D",
                "pattern": "^DisplayFace3D$",
                "type": "string",
                "readOnly": true
              },
              "display_mode": {
                "description": "Text to indicate the display mode (surface, wireframe, etc.). The DisplayModes enumeration contains all acceptable types.",
                "default": "Surface",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DisplayModes"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayFace3D",
        "description": "A single planar face in 3D space with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayPolyface3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Polyface3D for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Polyface3D"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayPolyface3D",
                "pattern": "^DisplayPolyface3D$",
                "type": "string",
                "readOnly": true
              },
              "display_mode": {
                "description": "Text to indicate the display mode (surface, wireframe, etc.). The DisplayModes enumeration contains all acceptable types.",
                "default": "Surface",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DisplayModes"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayPolyface3D",
        "description": "A Polyface in 3D space with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplaySphere": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Sphere for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Sphere"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplaySphere",
                "pattern": "^DisplaySphere$",
                "type": "string",
                "readOnly": true
              },
              "display_mode": {
                "description": "Text to indicate the display mode (surface, wireframe, etc.). The DisplayModes enumeration contains all acceptable types.",
                "default": "Surface",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DisplayModes"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplaySphere",
        "description": "A sphere object with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayCone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Cone for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Cone"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayCone",
                "pattern": "^DisplayCone$",
                "type": "string",
                "readOnly": true
              },
              "display_mode": {
                "description": "Text to indicate the display mode (surface, wireframe, etc.). The DisplayModes enumeration contains all acceptable types.",
                "default": "Surface",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DisplayModes"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayCone",
        "description": "A cone object with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayCylinder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "geometry"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "geometry": {
                "title": "Geometry",
                "description": "Cylinder for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Cylinder"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DisplayCylinder",
                "pattern": "^DisplayCylinder$",
                "type": "string",
                "readOnly": true
              },
              "display_mode": {
                "description": "Text to indicate the display mode (surface, wireframe, etc.). The DisplayModes enumeration contains all acceptable types.",
                "default": "Surface",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DisplayModes"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayCylinder",
        "description": "A cylinder object with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "HorizontalAlignments": {
        "title": "HorizontalAlignments",
        "description": "An enumeration.",
        "enum": [
          "Left",
          "Center",
          "Right"
        ],
        "type": "string"
      },
      "VerticalAlignments": {
        "title": "VerticalAlignments",
        "description": "An enumeration.",
        "enum": [
          "Top",
          "Middle",
          "Bottom"
        ],
        "type": "string"
      },
      "DisplayText3D": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color",
              "text",
              "plane",
              "height"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "text": {
                "title": "Text",
                "description": "A text string to be displayed in the 3D scene.",
                "type": "string"
              },
              "plane": {
                "title": "Plane",
                "description": "A ladybug-geometry Plane object to locate and orient the text in the 3D scene.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Plane"
                  }
                ]
              },
              "height": {
                "title": "Height",
                "description": "A number for the height of the text in the 3D scene.",
                "exclusiveMinimum": 0,
                "type": "number",
                "format": "double"
              },
              "type": {
                "title": "Type",
                "default": "DisplayText3D",
                "pattern": "^DisplayText3D$",
                "type": "string",
                "readOnly": true
              },
              "font": {
                "title": "Font",
                "description": "A text string for the font in which to draw the text. Note that this field may not be interpreted the same on all machines and in all interfaces, particularly when a machine lacks a given font.",
                "default": "Arial",
                "type": "string"
              },
              "horizontal_alignment": {
                "description": "String to specify the horizontal alignment of the text.",
                "default": "Left",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/HorizontalAlignments"
                  }
                ]
              },
              "vertical_alignment": {
                "description": "String to specify the vertical alignment of the text.",
                "default": "Bottom",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VerticalAlignments"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayText3D",
        "description": "A text object in 3D space with display properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ContextGeometry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_VisualizationBase"
          },
          {
            "type": "object",
            "required": [
              "geometry"
            ],
            "properties": {
              "geometry": {
                "title": "Geometry",
                "description": "A list of ladybug-geometry or ladybug-display objects that gives context to analysis geometry or other aspects of the visualization. Typically, these will display in wireframe around the geometry, though the properties of display geometry can be used to customize the visualization.",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/DisplayVector2D"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayPoint2D"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayRay2D"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayLineSegment2D"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayPolyline2D"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayArc2D"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayPolygon2D"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayMesh2D"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayVector3D"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayPoint3D"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayRay3D"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayPlane"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayLineSegment3D"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayPolyline3D"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayArc3D"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayFace3D"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayMesh3D"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayPolyface3D"
                    },
                    {
                      "$ref": "#/components/schemas/DisplaySphere"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayCone"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayCylinder"
                    },
                    {
                      "$ref": "#/components/schemas/DisplayText3D"
                    }
                  ]
                }
              },
              "type": {
                "title": "Type",
                "default": "ContextGeometry",
                "pattern": "^ContextGeometry$",
                "type": "string",
                "readOnly": true
              },
              "hidden": {
                "title": "Hidden",
                "description": "A boolean to note whether the geometry is hidden by default and must be un-hidden to be visible in the 3D scene.",
                "default": false,
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "ContextGeometry",
        "description": "An object representing context geometry to display.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Units": {
        "title": "Units",
        "description": "An enumeration.",
        "enum": [
          "Meters",
          "Millimeters",
          "Feet",
          "Inches",
          "Centimeters"
        ],
        "type": "string"
      },
      "VisualizationSet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_VisualizationBase"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "VisualizationSet",
                "pattern": "^VisualizationSet$",
                "type": "string",
                "readOnly": true
              },
              "geometry": {
                "title": "Geometry",
                "description": "A list of AnalysisGeometry and ContextGeometry objects to display in the visualization. Each geometry object will typically be translated to its own layer within the interface that renders the VisualizationSet.",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/AnalysisGeometry"
                    },
                    {
                      "$ref": "#/components/schemas/ContextGeometry"
                    }
                  ]
                }
              },
              "units": {
                "description": "Text indicating the units in which the model geometry exists. If None, the geometry will always be assumed to be in the current units system of the display interface.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Units"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "VisualizationSet",
        "description": "A visualization set containing analysis and context geometry to be visualized.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "_VisualizationBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "identifier": {
                "title": "Identifier",
                "description": "Text string for a unique object ID. Must be less than 100 characters and not contain spaces or special characters.",
                "maxLength": 100,
                "minLength": 1,
                "pattern": "^[.A-Za-z0-9_-]+$",
                "type": "string"
              },
              "display_name": {
                "title": "Display Name",
                "description": "Display name of the object with no character restrictions. This is typically used to set the layer of the object in the interface that renders the VisualizationSet. A :: in the display_name can be used to denote sub-layers following a convention of ParentLayer::SubLayer. If not set, the display_name will be equal to the object identifier.",
                "type": "string"
              },
              "user_data": {
                "title": "User Data",
                "description": "Optional dictionary of user data associated with the object.All keys and values of this dictionary should be of a standard data type to ensure correct serialization of the object (eg. str, float, int, list).",
                "type": "object"
              },
              "type": {
                "title": "Type",
                "default": "_VisualizationBase",
                "type": "string",
                "pattern": "^_VisualizationBase$",
                "readOnly": true
              }
            },
            "required": [
              "identifier"
            ],
            "additionalProperties": false
          }
        ],
        "title": "_VisualizationBase",
        "description": "Base class for visualization objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "SingleColorBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "SingleColorBase",
                "type": "string",
                "pattern": "^SingleColorBase$",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "SingleColorBase",
        "description": "Base class for all Geometric Display objects with a single color.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DisplayBaseModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "user_data": {
                "title": "User Data",
                "description": "Optional dictionary of user data associated with the object.All keys and values of this dictionary should be of a standard data type to ensure correct serialization of the object (eg. str, float, int, list).",
                "type": "object"
              },
              "type": {
                "title": "Type",
                "default": "DisplayBaseModel",
                "type": "string",
                "pattern": "^DisplayBaseModel$",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "DisplayBaseModel",
        "description": "Base class for all Geometric Display objects.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "LineCurveBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayBaseModel"
          },
          {
            "type": "object",
            "required": [
              "color"
            ],
            "properties": {
              "color": {
                "title": "Color",
                "description": "Color for the geometry.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Color"
                  }
                ]
              },
              "line_width": {
                "title": "Line Width",
                "description": "Number for line width in pixels (for the screen) or millimeters (in print). Set to zero to hide the geometry.",
                "default": {
                  "type": "Default"
                },
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Default"
                  },
                  {
                    "type": "number",
                    "minimum": 0
                  }
                ]
              },
              "line_type": {
                "description": "Text to indicate the type of line to display (dashed, dotted, etc.). The LineTypes enumeration contains all acceptable types.",
                "default": "Continuous",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LineTypes"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "LineCurveBase",
                "type": "string",
                "pattern": "^LineCurveBase$",
                "readOnly": true
              }
            },
            "additionalProperties": false
          }
        ],
        "title": "LineCurveBase",
        "description": "Base class for all Geometric Display objects with a line like properties.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "_OpenAPIGenBaseModel": {
        "title": "_OpenAPIGenBaseModel",
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "description": "A base class to use when there is no baseclass available to fall on.",
            "default": "InvalidType",
            "type": "string",
            "readOnly": true
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      }
    }
  }
}